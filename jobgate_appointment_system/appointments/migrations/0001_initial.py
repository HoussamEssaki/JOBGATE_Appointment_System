# Generated by Django 5.2.4 on 2025-07-15 10:49

import django.core.validators
import django.utils.timezone
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Agenda',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('slot_duration_minutes', models.PositiveIntegerField(default=30, validators=[django.core.validators.MinValueValidator(1)])),
                ('max_capacity_per_slot', models.PositiveIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)])),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('is_recurring', models.BooleanField(default=False)),
                ('recurrence_pattern', models.JSONField(blank=True, default=dict)),
                ('booking_deadline_hours', models.PositiveIntegerField(default=24)),
                ('cancellation_deadline_hours', models.PositiveIntegerField(default=24)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'agendas',
            },
        ),
        migrations.CreateModel(
            name='AgendaStaffAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('advisor', 'Advisor'), ('coordinator', 'Coordinator'), ('assistant', 'Assistant')], default='advisor', max_length=50)),
                ('is_primary', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'agenda_staff_assignments',
            },
        ),
        migrations.CreateModel(
            name='Appointment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('booking_reference', models.CharField(default=uuid.uuid4, max_length=50, unique=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('confirmed', 'Confirmed'), ('cancelled', 'Cancelled'), ('completed', 'Completed'), ('no_show', 'No Show')], default='confirmed', max_length=20)),
                ('talent_notes', models.TextField(blank=True, null=True)),
                ('staff_notes', models.TextField(blank=True, null=True)),
                ('rating', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('feedback', models.TextField(blank=True, null=True)),
                ('reminder_sent_24h', models.BooleanField(default=False)),
                ('reminder_sent_1h', models.BooleanField(default=False)),
                ('confirmation_sent', models.BooleanField(default=False)),
                ('booked_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('cancelled_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'appointments',
            },
        ),
        migrations.CreateModel(
            name='AppointmentAttachment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file_name', models.CharField(max_length=255)),
                ('file_path', models.CharField(max_length=500)),
                ('file_size', models.PositiveIntegerField(blank=True, null=True)),
                ('file_type', models.CharField(blank=True, max_length=50, null=True)),
                ('uploaded_at', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'appointment_attachments',
            },
        ),
        migrations.CreateModel(
            name='AppointmentStatistics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('total_slots', models.PositiveIntegerField(default=0)),
                ('booked_slots', models.PositiveIntegerField(default=0)),
                ('completed_appointments', models.PositiveIntegerField(default=0)),
                ('cancelled_appointments', models.PositiveIntegerField(default=0)),
                ('no_show_appointments', models.PositiveIntegerField(default=0)),
                ('total_duration_minutes', models.PositiveIntegerField(default=0)),
                ('unique_talents_count', models.PositiveIntegerField(default=0)),
                ('average_rating', models.DecimalField(blank=True, decimal_places=2, max_digits=3, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'appointment_statistics',
            },
        ),
        migrations.CreateModel(
            name='AppointmentTheme',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('color_code', models.CharField(blank=True, max_length=7, null=True)),
                ('icon', models.CharField(blank=True, max_length=50, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'appointment_themes',
            },
        ),
        migrations.CreateModel(
            name='CalendarSlot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slot_date', models.DateField()),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('max_capacity', models.PositiveIntegerField(default=1)),
                ('current_bookings', models.PositiveIntegerField(default=0)),
                ('status', models.CharField(choices=[('available', 'Available'), ('fully_booked', 'Fully Booked'), ('cancelled', 'Cancelled'), ('blocked', 'Blocked')], default='available', max_length=20)),
                ('notes', models.TextField(blank=True, null=True)),
                ('location', models.CharField(blank=True, max_length=255, null=True)),
                ('meeting_type', models.CharField(choices=[('in_person', 'In Person'), ('online', 'Online'), ('phone', 'Phone')], default='in_person', max_length=20)),
                ('meeting_link', models.URLField(blank=True, max_length=500, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'calendar_slots',
            },
        ),
        migrations.CreateModel(
            name='EmailReminder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reminder_type', models.CharField(choices=[('confirmation', 'Confirmation'), ('24_hour', '24 Hour Reminder'), ('1_hour', '1 Hour Reminder'), ('cancellation', 'Cancellation'), ('follow_up', 'Follow Up')], max_length=20)),
                ('recipient_email', models.EmailField(max_length=254)),
                ('subject', models.CharField(max_length=255)),
                ('sent_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('sent', 'Sent'), ('failed', 'Failed'), ('bounced', 'Bounced')], default='sent', max_length=20)),
                ('error_message', models.TextField(blank=True, null=True)),
                ('email_provider_id', models.CharField(blank=True, max_length=100, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'email_reminders',
            },
        ),
        migrations.CreateModel(
            name='TalentEligibilityCriteria',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('criteria_type', models.CharField(choices=[('university', 'University'), ('year_of_study', 'Year of Study'), ('field_of_study', 'Field of Study'), ('gpa_minimum', 'Minimum GPA')], max_length=50)),
                ('criteria_value', models.CharField(max_length=255)),
                ('is_required', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'talent_eligibility_criteria',
            },
        ),
    ]
